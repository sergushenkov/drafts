. Глобальная ошибка одна - забыл про фразу "В рефлексии обращайте внимание не на реализацию, а на правильность пред- и пост-условий прежде всего (их наличие в виде комментариев к вашим методам в коде абсолютно обязательно)" из сообщения в ВК. Делая домашнее задание опирался на конечный вариант АТД Stack, там пред- и пост-условия проставлены не были. Но, фактически - проверка всех предусловий в коде реализована

. Плюс не был уверен, надо ли было использовать модуль abc для написания абстрактных классов. С одной стороны вроде в курсе это прямо рекомендуют, с другой не вижу каких то плюсов по сравнению с комментариями просто в классе.

. Статус выполнения команд (POP_NIL, POP_OK и т.д.) - в идеале должны быть константами, но в python это не задать, так что считаю нормально.

. В эталонном варианте не определена PUSH_NIL - думал что она необходима, потому что иначе непонятно что должен возвращать метод get_push_status(), если вызвать его ДО первого вызова метода push(). Перечитав теорию - понял что на самом деле функционала не несёт, если get_push_status() до первого push будет возвращать ОК (1) - это нормально

. У меня не задан метод max_size() - думал что раз мы самостоятельно создаём BoundedStack с заданным размером, то метод не потребуется. Сказывается привычка к маленьким по размерам программам, когда всё в пределах экрана-двух. Ещё раз подумав - да, он нужен - всё таки это публичный параметр, должна быть возможность его просмотреть.

. В остальном мой вариант и эталонный фактически совпадают (с учетом того что мой вариант в виде класса python, а эталонный в виде псевдокода) - по "публичности" атрибутов и методов, разделению на команды и запросы.